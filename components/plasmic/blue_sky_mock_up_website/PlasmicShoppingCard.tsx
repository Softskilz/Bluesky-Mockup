// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4kmT42g2H7uUo6tUMY4ybn
// Component: 7Rw9nWHdqElo

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: tkOt_-8cchSg/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 4kmT42g2H7uUo6tUMY4ybn/projectcss
import sty from "./PlasmicShoppingCard.module.css"; // plasmic-import: 7Rw9nWHdqElo/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 3Q8kq8VDbV-U/icon

createPlasmicElementProxy;

export type PlasmicShoppingCard__VariantMembers = {};
export type PlasmicShoppingCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicShoppingCard__VariantsArgs;
export const PlasmicShoppingCard__VariantProps = new Array<VariantPropType>();

export type PlasmicShoppingCard__ArgsType = {};
type ArgPropType = keyof PlasmicShoppingCard__ArgsType;
export const PlasmicShoppingCard__ArgProps = new Array<ArgPropType>();

export type PlasmicShoppingCard__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  columns?: Flex__<"div">;
  addToCart?: Flex__<typeof Button>;
};

export interface DefaultShoppingCardProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicShoppingCard__RenderFunc(props: {
  variants: PlasmicShoppingCard__VariantsArgs;
  args: PlasmicShoppingCard__ArgsType;
  overrides: PlasmicShoppingCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section)}
      >
        <div
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          className={classNames(projectcss.all, sty.columns)}
        >
          <div className={classNames(projectcss.all, sty.column__eKco3)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__nCdRw)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__q0P9C
              )}
            >
              {"Enter some text"}
            </div>
            <Button
              data-plasmic-name={"addToCart"}
              data-plasmic-override={overrides.addToCart}
              className={classNames("__wab_instance", sty.addToCart)}
              color={(() => {
                try {
                  return undefined;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bGniG
                )}
              >
                {"ADD TO CART"}
              </div>
            </Button>
          </div>
          <div className={classNames(projectcss.all, sty.column__rKte9)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__iRYm)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1NrhX
              )}
            >
              {"Enter some text"}
            </div>
            <Button className={classNames("__wab_instance", sty.button__nJt5)}>
              {"ADD TO CART"}
            </Button>
          </div>
          <div className={classNames(projectcss.all, sty.column__skOxh)}>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__ygIvo)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cgYwr
              )}
            >
              {"Enter some text"}
            </div>
            <Button className={classNames("__wab_instance", sty.button__moyhM)}>
              {"ADD To CART"}
            </Button>
          </div>
        </div>
      </section>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "section", "columns", "addToCart"],
  section: ["section", "columns", "addToCart"],
  columns: ["columns", "addToCart"],
  addToCart: ["addToCart"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  columns: "div";
  addToCart: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShoppingCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShoppingCard__VariantsArgs;
    args?: PlasmicShoppingCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShoppingCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicShoppingCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicShoppingCard__ArgProps,
          internalVariantPropNames: PlasmicShoppingCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicShoppingCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShoppingCard";
  } else {
    func.displayName = `PlasmicShoppingCard.${nodeName}`;
  }
  return func;
}

export const PlasmicShoppingCard = Object.assign(
  // Top-level PlasmicShoppingCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    columns: makeNodeComponent("columns"),
    addToCart: makeNodeComponent("addToCart"),

    // Metadata about props expected for PlasmicShoppingCard
    internalVariantProps: PlasmicShoppingCard__VariantProps,
    internalArgProps: PlasmicShoppingCard__ArgProps
  }
);

export default PlasmicShoppingCard;
/* prettier-ignore-end */
